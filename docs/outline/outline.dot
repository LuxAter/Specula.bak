digraph G {

  rankdir=LR;

  node[shape=box]
    splines=ortho;

  // core/
  subgraph cluster_core0 {
    style=bold;
    subgraph cluster_core1 {
      style=bold;

      // pbrt.h
      subgraph cluster_pbrt {
        style=bold;
      };

      // geometry.h
      subgraph cluster_geometry {
        style=bold;
        Vector2;
        Vector3;
        Point2;
        Point3;
        Normal3;
        Bounds2;
        Bounds3;
        Ray;
        RayDifferential;
      };
      Point2 -> Vector2[style=dotted];

      Point3 -> Vector3[style=dotted];
      Normal3 -> Vector3[style=dotted];

      Vector2 -> Point2[style=dotted];

      Vector3 -> Point3[style=dotted];

      Vector3 -> Normal3[style=dotted];

      Point2 -> Bounds2;
      Vector2 -> Bounds2[style=dotted];

      Point3 -> Bounds3;
      Vector3 -> Bounds3[style=dotted];
      Ray -> Bounds3[style=dotted];

      Point3 -> Ray;
      Vector3 -> Ray;
      Medium -> Ray[color=purple];

      Ray -> RayDifferential[style=dashed];
      Point3 -> RayDifferential;
      Vector3 -> RayDifferential;

      // bssrdf.h
      subgraph cluster_bssrdf {
        style=bold;

        BSSRDF;
        SeparableBSSRDF;
        SeparableBSSRDFAdapter;
        BSSRDFTable;
        TabulatedBSSRDF;
      };
      SurfaceInteraction -> BSSRDF;
      Spectrum -> BSSRDF[style=dotted];
      SurfaceInteraction -> BSSRDF[style=dotted]
        Vector3 -> BSSRDF[style=dotted];
      MemoryArena -> BSSRDF[stype=dotted];

      BSSRDF -> SeparableBSSRDF[style=dashed];
      Normal3 -> SeparableBSSRDF;
      Vector3 -> SeparableBSSRDF;
      Material -> SeparableBSSRDF[color=purple];
      TransportMode -> SeparableBSSRDF;
      Spectrum -> SeparableBSSRDF[style=dotted];
      SurfaceInteraction -> SeparableBSSRDF[style=dotted];
      Vector3 -> SeparableBSSRDF[style=dotted];
      Scene -> SeparableBSSRDF[style=dotted];
      Point2 -> SeparableBSSRDF[style=dotted];
      MemoryArena -> SeparableBSSRDF[style=dotted];

      SeparableBSSRDF -> TabulatedBSSRDF[style=dashed];
      BSSRDFTable -> TabulatedBSSRDF;
      Spectrum -> TabulatedBSSRDF;
      Spectrum -> TabulatedBSSRDF[style=dotted];


      BxDF -> SeparableBSSRDFAdapter[style=dashed];
      SeparableBSSRDF -> SeparableBSSRDFAdapter[color=purple];
      Spectrum -> SeparableBSSRDFAdapter[style=dotted];
      Vector3 -> SeparableBSSRDFAdapter[style=dotted];

      // camera.h
      subgraph cluster_camera {
        style=bold;
        Camera;
        CameraSample;
        ProjectiveCamera;
      };
      AnimatedTransform -> Camera;
      Film -> Camera[color=purple];
      Medium -> Camera[color=purple];

      Point2 -> CameraSample;

      Camera -> ProjectiveCamera[style=dashed];
      Transform -> ProjectiveCamera;

      // efloat.h
      subgraph cluster_efloat {
        style=bold;
      };

      // film.h
      subgraph cluster_film {
        style=bold;
        Film;
        Pixel;
        FilmTile;
        FilmTilePixel;
      };

      Point2 -> Film;
      Filter -> Film[color=purple];
      Bounds2 -> Film;
      Pixel -> Film;
      FilmTile -> Film[style=dotted,color=purple];
      Spectrum -> Film[style=dotted];

      AtomicFloat -> Pixel;

      Film -> FilmTile[color=blue];
      Bounds2 -> FilmTile;
      Vector2 -> FilmTile;
      FilmTilePixel -> FilmTile;
      Point2 -> FilmTile[style=dotted];
      Spectrum -> FilmTile[style=dotted];

      Spectrum -> FilmTilePixel;


      // filter.h

      subgraph cluster_filter {
        style=bold;
        Filter;
      };

      Vector2 -> Filter;
      Point2 -> Filter[style=dotted];

      // integrator.h
      subgraph cluster_integrator {
        style=bold;
        Integrator;
        SamplerIntegrator;
      };
      Scene -> Integrator[style=dotted];

      Integrator -> SamplerIntegrator[style=dashed];
      Camera -> SamplerIntegrator[color=purple];
      Sampler -> SamplerIntegrator[color=purple];
      Bounds2 -> SamplerIntegrator;
      Scene -> SamplerIntegrator[style=dotted];
      Spectrum -> SamplerIntegrator[style=dotted];
      MemoryArena -> SamplerIntegrator[style=dotted];
      SurfaceInteraction -> SamplerIntegrator[style=dotted];

      // interaction.h
      subgraph cluster_interaction {
        style=bold;
        Interaction;
        MediumInteraction;
        SurfaceInteraction;
      };
      Point3 -> Interaction;
      Vector3 -> Interaction;
      Normal3 -> Interaction;
      MediumInterface -> Interaction;
      Medium -> Interaction[style=dotted,color=purple];

      Interaction -> MediumInteraction[style=dashed];
      PhaseFunction -> MediumInteraction[color=purple];

      Interaction -> SurfaceInteraction[style=dashed];
      Point2 -> SurfaceInteraction;
      Vector3 -> SurfaceInteraction;
      Normal3 -> SurfaceInteraction;
      Shape -> SurfaceInteraction[color=purple];
      Primitive -> SurfaceInteraction[color=purple];
      BSDF -> SurfaceInteraction[color=purple];
      BSSRDF -> SurfaceInteraction[color=purple];
      RayDifferential -> SurfaceInteraction[style=dotted];
      TransportMode -> SurfaceInteraction[style=dotted];

      // light.h
      subgraph cluster_light {
        style=bold;
        LightFlags;
        Light;
        VisibilityTester;
        AreaLight;
      };
      MediumInterface -> Light;
      TransportMode -> Light;
      Spectrum -> Light[style=dotted];
      Scene -> Light[style=dotted];
      RayDifferential -> Light[style=dotted];
      Interaction -> Light[style=dotted];
      Vector3 -> Light[style=dotted];
      Point2 -> Light[style=dotted];
      Ray -> Light[style=dotted];
      Normal3 -> Light[style=dotted];

      Interaction -> VisibilityTester;
      Scene -> VisibilityTester[style=dotted];
      Sampler -> VisibilityTester[style=dotted];

      Light -> AreaLight[style=dashed];
      Spectrum -> AreaLight[style=dotted];
      Interaction -> AreaLight[style=dotted];
      Vector3 -> AreaLight[style=dotted];

      // lightdistrib.h
      subgraph cluster_lightdistrib {
        style=bold;
        LightDistribution;
        UniformLightDistribution;
        PowerLightDistribution;
        SpatialLightDistribution;
      };
      Point3 -> LightDistribution[style=dotted];
      Distribution1D -> LightDistribution[style=dotted,color=purple];

      LightDistribution -> UniformLightDistribution[style=dashed];
      Distribution1D -> UniformLightDistribution[color=purple];
      Scene -> UniformLightDistribution[style=dotted];
      Point3 -> UniformLightDistribution[style=dotted];

      LightDistribution -> PowerLightDistribution[style=dashed];
      Distribution1D -> PowerLightDistribution[color=purple];
      Scene -> PowerLightDistribution[style=dotted];
      Point3 -> PowerLightDistribution[style=dotted];

      LightDistribution -> SpatialLightDistribution[style=dashed];
      Scene -> SpatialLightDistribution;
      Distribution1D -> SpatialLightDistribution[color=purple];
      Point3 -> SpatialLightDistribution[style=dotted];

      // material.h
      subgraph cluster_material {
        style=bold;
        TransportMode;
        Material;
      };
      SurfaceInteraction -> Material[style=dotted,color=purple];
      MemoryArena -> Material[style=dotted];
      TransportMode -> Material[style=dotted];
      Texture -> Material[style=dotted,color=purple];
      SurfaceInteraction -> Material[style=dotted,color=purple];

      // medium.h
      subgraph cluster_medium {
        style=bold;
        PhaseFunction;
        Medium;
        HenyeyGreenstein;
        MediumInterface;
      };
      Vector3 -> PhaseFunction[style=dotted];
      Point2 -> PhaseFunction[style=dotted];

      Spectrum -> Medium[style=dotted];
      Ray -> Medium[style=dotted];
      Sampler -> Medium[style=dotted];
      MemoryArena -> Medium[style=dotted];
      MediumInteraction -> Medium[style=dotted,color=purple];

      PhaseFunction -> HenyeyGreenstein[style=dashed];
      Vector3 -> HenyeyGreenstein[style=dotted];
      Point2 -> HenyeyGreenstein[style=dotted];

      Medium -> MediumInterface[color=purple];

      // memory.h
      subgraph cluster_memory {
        style=bold;
        MemoryArena;
        BlockedArray;
      };

      // microfacet.h
      subgraph cluster_microfacet {
        style=bold;
        MicrofacetDistribution;
        BeckmannDistribution;
        TrowbridgeReitzDistribution;
      };
      Vector3 -> MicrofacetDistribution[style=dotted];
      Point2 -> MicrofacetDistribution[style=dotted];

      MicrofacetDistribution -> BeckmannDistribution[style=dashed];
      Vector3 -> BeckmannDistribution[style=dotted];
      Point2 -> BeckmannDistribution[style=dotted];

      MicrofacetDistribution -> TrowbridgeReitzDistribution[style=dashed];
      Vector3 -> TrowbridgeReitzDistribution[style=dotted];
      Point2 -> TrowbridgeReitzDistribution[style=dotted];

      // mipmap.h
      subgraph cluster_mipmap {
        style=bold;
        ImageWrap;
        ResampleWeight;
        MIPMap;
      };
      ImageWrap -> MIPMap;
      Point2 -> MIPMap;
      BlockedArray -> MIPMap[color=purple];
      Vector2 -> MIPMap[style=dotted];
      ResampleWeight -> MIPMap[style=dotted,color=purple];
      RGBSpectrum -> MIPMap[style=dotted];
      SampledSpectrum -> MIPMap[style=dotted];

      // parallel.h
      subgraph cluster_parallel {
        style=bold;
        AtomicFloat;
        Barrier;
      };

      // paramset.h
      subgraph cluster_paramset {
        stype=bold;
        ParamSet;
        ParamSetItem;
        TextureParams;
      };
      TextureParams -> ParamSet[color=blue];
      ParamSetItem -> ParamSet[color=purple];
      Spectrum -> ParamSet;
      Point2 -> ParamSet[style=dotted];
      Vector2 -> ParamSet[style=dotted];
      Point3 -> ParamSet[style=dotted];
      Vector3 -> ParamSet[style=dotted];
      Normal3 -> ParamSet[style=dotted];
      Spectrum -> ParamSet[style=dotted];

      Texture -> TextureParams[color=purple];
      ParamSet -> TextureParams;
      Point3-> TextureParams[style=dotted];
      Vector3 -> TextureParams[style=dotted];
      Normal3 -> TextureParams[style=dotted];
      Spectrum -> TextureParams[style=dotted];

      // primitive.h
      subgraph cluster_primitive {
        style=bold;
        Primitive;
        GeometricPrimitive;
        TransformedPrimitive;
        Aggregate;
      };
      Bounds3 -> Primitive[style=dotted];
      Ray -> Primitive[style=dotted];
      SurfaceInteraction -> Primitive[style=dotted,color=purple];
      AreaLight -> Primitive[style=dotted,color=purple];
      Material -> Primitive[style=dotted,color=purple];
      MemoryArena -> Primitive[style=dotted];
      TransportMode -> Primitive[style=dotted];

      Primitive -> GeometricPrimitive[style=dashed];
      Shape -> GeometricPrimitive[clor=purple];
      Material -> GeometricPrimitive[color=purple];
      AreaLight -> GeometricPrimitive[color=purple];
      MediumInterface -> GeometricPrimitive;
      Bounds3 -> GeometricPrimitive[style=dotted];
      Ray -> GeometricPrimitive[style=dotted];
      SurfaceInteraction -> GeometricPrimitive[style=dotted,color=purple];
      Material -> GeometricPrimitive[style=dotted,color=purple];
      MemoryArena -> GeometricPrimitive[style=dotted];
      TransportMode -> GeometricPrimitive[style=dotted];

      Primitive -> TransformedPrimitive[style=dashed];
      Primitive -> TransformedPrimitive[color=purple];
      AnimatedTransform -> TransformedPrimitive;
      Ray -> TransformedPrimitive[style=dotted];
      SurfaceInteraction -> TransformedPrimitive[style=dotted,color=purple];
      AreaLight -> TransformedPrimitive[style=dotted,color=purple];
      Material -> TransformedPrimitive[style=dotted,color=purple];
      MemoryArena -> TransformedPrimitive[style=dotted];
      TransportMode -> TransformedPrimitive[style=dotted];
      Bounds3 -> TransformedPrimitive[style=dotted];

      Primitive -> Aggregate[style=dashed];
      AreaLight -> Aggregate[style=dotted,color=purple];
      Material -> Aggregate[style=dotted,color=purple];
      SurfaceInteraction -> Aggregate[style=dotted,color=purple];
      MemoryArena -> Aggregate[style=dotted];
      TransportMode -> Aggregate[style=dotted];

      // quaternion.h
      subgraph cluster_quaternion {
        style=bold;
        Quaternion;
      };
      Vector3 -> Quaternion;
      Transform -> Quaternion[style=dotted];

      // reflection.h
      subgraph cluster_reflection {
        style=bold;
        BxDFType;
        FourierBSDFTable;
        BSDF;
        BxDF;
        ScaledBxDF;
        Fresnel;
        FresnelConductor;
        FresnelDielectric;
        FresnelNoOp;
        SpecularReflection;
        SpecularTransmission;
        FresnelSpecular;
        LambertianReflection;
        LambertianTransmission;
        OrenNayar;
        MicrofacetReflection;
        MicrofacetTransmission;
        FresnelBlend;
        FourierBSDF;
      };

      MixMaterial -> BSDF[color=blue];
      Normal3 -> BSDF;
      Vector3 -> BSDF;
      BxDF -> BSDF[color=purple];
      SurfaceInteraction -> BSDF[style=dotted];
      BxDFType -> BSDF[style=dotted];
      Point2 -> BSDF[style=dotted];
      Spectrum -> BSDF[style=dotted];

      BxDFType -> BxDF;
      Vector3 -> BxDF[style=dotted];
      Point2 -> BxDF[style=dotted];
      Spectrum -> BxDF[style=dotted];

      BxDF -> ScaledBxDF[style=dashed];
      BxDF -> ScaledBxDF[color=purple];
      Spectrum -> ScaledBxDF;
      Vector3 -> ScaledBxDF[style=dotted];
      Point2 -> ScaledBxDF[style=dotted];
      BxDFType -> ScaledBxDF[style=dotted,color=purple];

      Spectrum -> Fresnel[style=dotted];

      Fresnel -> FresnelConductor[style=dashed];
      Spectrum -> FresnelConductor;

      Fresnel -> FresnelDielectric[style=dashed];
      Spectrum -> FresnelDielectric[style=dotted];

      Fresnel -> FresnelNoOp[style=dashed];
      Spectrum -> FresnelNoOp[style=dotted];

      BxDF -> SpecularReflection[style=dashed];
      Spectrum -> SpecularReflection;
      Fresnel -> SpecularReflection[color=purple];
      Vector3 -> SpecularReflection[style=dotted];
      Point2 -> SpecularReflection[style=dotted];
      BxDFType -> SpecularReflection[style=dotted,color=purple];

      BxDF -> SpecularTransmission[style=dashed];
      Spectrum -> SpecularTransmission;
      FresnelDielectric -> SpecularTransmission;
      TransportMode -> SpecularTransmission;
      Vector3 -> SpecularTransmission[style=dotted];
      Point2 -> SpecularTransmission[style=dotted];
      BxDFType -> SpecularTransmission[style=dotted,color=purple];

      BxDF -> FresnelSpecular[style=dashed];
      Spectrum -> FresnelSpecular;
      TransportMode -> FresnelSpecular;
      Vector3 -> FresnelSpecular[style=dotted];
      Point2 -> FresnelSpecular[style=dotted];
      BxDFType -> FresnelSpecular[style=dotted,color=purple];

      BxDF -> LambertianReflection[style=dashed];
      Spectrum -> LambertianReflection;
      Vector3 -> LambertianReflection[style=dotted];
      Point2 -> LambertianReflection[style=dotted,color=purple];

      BxDF -> LambertianTransmission[style=dashed];
      Spectrum -> LambertianTransmission;
      Vector3 -> LambertianTransmission[style=dotted];
      Point2 -> LambertianTransmission[style=dotted];
      BxDFType -> LambertianTransmission[style=dotted,color=purple];

      BxDF -> OrenNayar[style=dashed];
      Spectrum -> OrenNayar;
      Vector3 -> OrenNayar[style=dotted];

      BxDF -> MicrofacetReflection[style=dashed];
      Spectrum -> MicrofacetReflection;
      MicrofacetDistribution -> MicrofacetReflection[color=purple];
      Fresnel -> MicrofacetReflection[color=purple];
      Vector3 -> MicrofacetReflection[style=dotted];
      Point2 -> MicrofacetReflection[style=dotted];
      BxDFType -> MicrofacetReflection[style=dotted,color=purple];

      BxDF -> MicrofacetTransmission[style=dashed];
      Spectrum -> MicrofacetTransmission;
      MicrofacetDistribution -> MicrofacetTransmission[color=purple];
      FresnelDielectric -> MicrofacetTransmission;
      TransportMode -> MicrofacetTransmission;
      Vector3 -> MicrofacetTransmission[style=dotted];
      Point2 -> MicrofacetTransmission[style=dotted];
      BxDFType -> MicrofacetTransmission[style=dotted,color=purple];

      BxDF -> FresnelBlend[style=dashed];
      Spectrum -> FresnelBlend;
      MicrofacetDistribution -> FresnelBlend[color=purple];
      Vector3 -> FresnelBlend[style=dotted];
      Point2 -> FresnelBlend[style=dotted];
      BxDFType -> FresnelBlend[style=dotted,color=purple];

      BxDF -> FourierBSDF[style=dashed];
      FourierBSDFTable -> FourierBSDF;
      TransportMode -> FourierBSDF;
      Spectrum -> FourierBSDF[style=dotted];
      Vector3 -> FourierBSDF[style=dotted];
      Point2 -> FourierBSDF[style=dotted];
      BxDFType -> FourierBSDF[style=dotted,color=purple];

      // rng.h
      subgraph cluster_rng {
        style=bold;
        RNG;
      };

      // sampler.h
      subgraph cluster_sampler {
        style=bold;
        Sampler;
        PixelSampler;
        GlobalSampler;
      };
      Point2 -> Sampler;
      CameraSample -> Sampler[styled=dotted];

      Sampler -> PixelSampler[style=dashed];
      Point2 -> PixelSampler;
      RNG -> PixelSampler;

      Sampler -> GlobalSampler[style=dashed];
      Point2 -> GlobalSampler[style=dotted];

      // sampling.h
      subgraph cluster_sampling {
        style=bold;
        Distribution1D;
        Distribution2D;
      };
      Distribution1D -> Distribution2D[color=purple];
      Point2 -> Distribution2D[style=dotted];

      // scene.h
      subgraph cluster_scene {
        style=bold;
        Scene;
      };
      Bounds3 -> Scene;
      Primitive -> Scene[color=purple];
      Light -> Scene[color=purple];
      Ray -> Scene[style=dotted];
      SurfaceInteraction -> Scene[style=dotted,color=purple];
      Spectrum -> Scene[style=dotted,color=purple];
      Sampler -> Scene[style=dotted];

      // shape.h
      subgraph cluster_shape {
        style=bold;
        Shape;
      };
      Transform -> Shape[color=purple];
      Bounds3 -> Shape[style=dotted];
      Ray -> Shape[style=dotted];
      SurfaceInteraction -> Shape[style=dotted,color=purple];
      Interaction -> Shape[style=dotted];
      Point2 -> Shape[style=dotted];
      Vector3 -> Shape[style=dotted];
      Point3 -> Shape[style=dotted];

      // spectrum.h
      subgraph cluster_spectrum {
        style=bold;
        SpectrumType;
        CoefficentSpectrum;
        SampledSpectrum;
        RGBSpectrum;
        Spectrum;
      };
      CoefficentSpectrum -> SampledSpectrum[style=dashed];
      RGBSpectrum -> SampledSpectrum[style=dotted];

      CoefficentSpectrum -> RGBSpectrum[style=dashed];

      SampledSpectrum -> Spectrum[color=red];
      RGBSpectrum -> Spectrum[color=red];

      // texture.h
      subgraph cluster_texture {
        style=bold;
        TextureMapping2D;
        UVMapping2D;
        SphericalMapping2D;
        CylindricalMapping2D;
        PlanarMapping2D;
        TextureMapping3D;
        IdentityMapping3D;
        Texture;
      };
      Point2 -> TextureMapping2D[style=dotted];
      SurfaceInteraction -> TextureMapping2D[style=dotted];
      Vector2 -> TextureMapping2D[style=dotted,color=purple];

      TextureMapping2D -> UVMapping2D[style=dashed];
      SurfaceInteraction -> UVMapping2D[style=dotted];
      Point2 -> UVMapping2D[style=dotted];
      Vector2 -> UVMapping2D[style=dotted,color=purple];

      TextureMapping2D -> SphericalMapping2D[style=dashed];
      Transform -> SphericalMapping2D;
      SurfaceInteraction -> SphericalMapping2D[style=dotted];
      Point2 -> SphericalMapping2D[style=dotted];
      Vector2 -> SphericalMapping2D[style=dotted,color=purple];

      TextureMapping2D -> CylindricalMapping2D[style=dashed];
      Transform -> CylindricalMapping2D;
      SurfaceInteraction -> CylindricalMapping2D[style=dotted];
      Point2 -> CylindricalMapping2D[style=dotted];
      Vector2 -> CylindricalMapping2D[style=dotted,color=purple];

      TextureMapping2D -> PlanarMapping2D[style=dashed];
      Vector3 -> PlanarMapping2D;
      SurfaceInteraction -> PlanarMapping2D[style=dotted];
      Point2 -> PlanarMapping2D[style=dotted];

      SurfaceInteraction -> TextureMapping3D[style=dotted];
      Point3 -> TextureMapping3D[style=dotted];
      Vector3 -> TextureMapping3D[style=dotted,color=purple];

      TextureMapping3D -> IdentityMapping3D[style=dashed];
      Transform -> IdentityMapping3D;
      SurfaceInteraction -> IdentityMapping3D[style=dotted];
      Point3 -> IdentityMapping3D[style=dotted];
      Vector3 -> IdentityMapping3D[style=dotted,color=purple];

      SurfaceInteraction -> Texture[style=dotted];

      // transform.h
      subgraph cluster_transform {
        style=bold;
        Matrix4x4;
        Transform;
        AnimatedTransform;
      };
      Matrix4x4 -> Transform;
      AnimatedTransform -> Transform[color=blue];
      Quaternion -> Transform[color=blue];
      Point3 -> Transform[style=dotted];
      Vector3 -> Transform[style=dotted];
      Normal3 -> Transform[style=dotted];
      Ray -> Transform[style=dotted];
      RayDifferential -> Transform[style=dotted];
      Bounds3 -> Transform[style=dotted];
      SurfaceInteraction -> Transform[style=dotted];

      Transform -> AnimatedTransform[color=purple];
      Vector3 -> AnimatedTransform;
      Quaternion -> AnimatedTransform;
      Matrix4x4 -> AnimatedTransform;
      Ray -> AnimatedTransform[style=dotted];
      RayDifferential -> AnimatedTransform[style=dotted];
      Point3 -> AnimatedTransform[style=dotted];
      Bounds3 -> AnimatedTransform[style=dotted]

    };
  };

  // accelerators/
  subgraph cluster_accelerators0 {
    style=bold;
    subgraph cluster_accelerators1 {
      style=bold;

      // bvh.h
      subgraph cluster_bvh {
        style=bold;
        BVHAccel;
        BVHBuildNode;
        BVHPrimitiveInfo;
        MortonPrimitive;
        SplitMethod;
        LinearBVHNode;
        LBVHTreelet;
      };
      Aggregate -> BVHAccel[style=dashed];
      SplitMethod -> BVHAccel;
      Primitive -> BVHAccel[color=purple];
      LinearBVHNode -> BVHAccel[color=purple];
      Bounds3 -> BVHAccel[style=dotted];
      Ray -> BVHAccel[style=dotted];
      SurfaceInteraction -> BVHAccel[style=dotted,color=purple];
      MemoryArena -> BVHAccel[style=dotted];
      BVHPrimitiveInfo -> BVHAccel[style=dotted];
      BVHBuildNode -> BVHAccel[style=dotted,color=purple];
      MortonPrimitive -> BVHAccel[style=dotted,color=purple];

      Bounds3 -> BVHPrimitiveInfo;
      Point3 -> BVHPrimitiveInfo;

      Bounds3 -> BVHBuildNode;

      BVHBuildNode -> LBVHTreelet[color=purple];

      Bounds3 -> LinearBVHNode;

      // kdtreeaccel.h
      subgraph cluster_kdtreeaccel {
        style=bold;
        KdAccelNode;
        BoundEdge;
        KdTreeAccel;
        EdgeType;
        KdToDo;
      };
      Aggregate -> KdTreeAccel[style=dashed];
      Primitive -> KdTreeAccel[color=purple];
      KdAccelNode -> KdTreeAccel[color=purple];
      Bounds3 -> KdTreeAccel;

      KdAccelNode -> KdToDo[color=purple];

      EdgeType -> BoundEdge;
    };
  };

  // cameras/
  subgraph cluster_cameras0 {
    style=bold;
    subgraph cluster_cameras1 {
      style=bold;

      // environment.h
      subgraph cluster_environment {
        style=bold;
        EnvironmentCamera;
      };
      Camera -> EnvironmentCamera[style=dashed];
      CameraSample -> EnvironmentCamera[style=dotted];
      Ray -> EnvironmentCamera[style=dotted,color=purple];

      // orthographic.h
      subgraph cluster_orthographic {
        OrthographicCamera;
      };
      ProjectiveCamera -> OrthographicCamera[style=dashed];
      Vector3 -> OrthographicCamera;
      CameraSample -> OrthographicCamera[style=dotted];
      Ray -> OrthographicCamera[style=dotted,color=purple];
      RayDifferential -> OrthographicCamera[style=dotted,color=purple];

      // perspective.h
      subgraph cluster_perspective {
        style=bold;
        PerspectiveCamera;
      };
      ProjectiveCamera -> PerspectiveCamera[style=dashed];
      Vector3 -> PerspectiveCamera;
      CameraSample -> PerspectiveCamera[style=dotted];
      Ray -> PerspectiveCamera[style=dotted];
      RayDifferential -> PerspectiveCamera[style=dotted,color=purple];
      Spectrum -> PerspectiveCamera[style=dotted];
      Point2 -> PerspectiveCamera[style=dotted];
      VisibilityTester -> PerspectiveCamera[style=dotted,color=purple];

      // realistic.h
      subgraph cluster_realistic {
        style=bold;
        RealisticCamera;
        LenseElementInterface;
      };
      Camera -> RealisticCamera[style=dashed];
      LenseElementInterface -> RealisticCamera;
      Bounds2 -> RealisticCamera;
      CameraSample -> RealisticCamera[style=dotted];
      Ray -> RealisticCamera[style=dotted];
      Point2 -> RealisticCamera[style=dotted];
    };
  };

  // filters/
  subgraph cluster_filters0 {
    style=bold;
    subgraph cluster_filters1 {
      style=bold;

      // box.h
      subgraph cluster_box {
        style=bold;
        BoxFilter;
      };
      Filter -> BoxFilter[style=dashed];
      Vector2 -> BoxFilter[style=dotted];
      Point2 -> BoxFilter[style=dotted];

      // gaussian.h
      subgraph cluster_gaussian {
        style=bold;
        GaussianFilter;
      };
      Filter -> GaussianFilter[style=dashed];
      Vector2 -> GaussianFilter[style=dotted];
      Point2 -> GaussianFilter[style=dotted];

      // mitchell.h
      subgraph cluster_mitchell {
        style=bold;
        MitchellFilter;
      };
      Filter -> MitchellFilter[style=dashed];
      Vector2 -> MitchellFilter[style=dotted];
      Point2 -> MitchellFilter[style=dotted];

      // sinc.h
      subgraph cluster_sinc {
        style=bold;
        LanczosSincFilter;
      };
      Filter -> LanczosSincFilter[style=dashed];
      Vector2 -> LanczosSincFilter[style=dotted];
      Point2 -> LanczosSincFilter[style=dotted];

      // traingle.h
      subgraph cluster_triangle {
        style=bold;
        TriangleFilter;
      };
      Filter -> TriangleFilter[style=dashed];
      Vector2 -> TriangleFilter[style=dotted];
      Point2 -> TriangleFilter[style=dotted];
    };
  };

  // integrators/
  subgraph cluster_integrators0 {
    style=bold;
    subgraph cluster_integrators1 {
      style=bold;

      // ao.h
      subgraph cluster_ao {
        style=bold;
        AOIntegrator;
      };
      SamplerIntegrator -> AOIntegrator[style=dashed];
      RayDifferential -> AOIntegrator[style=dotted];
      Scene -> AOIntegrator[style=dotted];
      Sampler -> AOIntegrator[style=dotted];
      MemoryArena -> AOIntegrator[style=dotted];
      Spectrum -> AOIntegrator[style=dotted];

      // bdpt.h
      subgraph cluster_bdpt {
        style=bold;
        EndpointInteraction;
        VertexType;
        Vertex;
        ScopedAssignment;
        BDPTIntegrator;
      };
      Interaction -> EndpointInteraction[style=dashed];
      Camera -> EndpointInteraction[color=purple];
      Light -> EndpointInteraction[color=purple];
      Ray -> EndpointInteraction[style=dotted];
      Normal3 -> EndpointInteraction[style=dotted];

      VertexType -> Vertex;
      Spectrum -> Vertex;
      EndpointInteraction -> Vertex;
      MediumInterface -> Vertex;
      SurfaceInteraction -> Vertex;
      Camera -> Vertex[style=dotted,color=purple];
      Ray -> Vertex[style=dotted];
      Interaction -> Vertex[style=dotted];
      Light -> Vertex[style=dotted,color=purple];
      Normal3 -> Vertex[style=dotted];
      Point3 -> Vertex[style=dotted];
      Scene -> Vertex[style=dotted];
      Distribution1D -> Vertex[style=dotted];

      Integrator -> BDPTIntegrator[style=dashed];
      Sampler -> BDPTIntegrator[color=purple];
      Camera -> BDPTIntegrator[color=purple];
      Bounds2 -> BDPTIntegrator;
      Scene -> BDPTIntegrator[style=dotted];

      // directlighting.h
      subgraph cluster_directlighting {
        style=bold;
        LightStrategy;
        DirectLightingIntegrator;
      };
      SamplerIntegrator -> DirectLightingIntegrator[style=dashed];
      LightStrategy -> DirectLightingIntegrator;
      Spectrum -> DirectLightingIntegrator[style=dotted];
      RayDifferential -> DirectLightingIntegrator[style=dotted];
      Scene -> DirectLightingIntegrator[style=dotted];
      Sampler -> DirectLightingIntegrator[style=dotted];
      MemoryArena -> DirectLightingIntegrator[style=dotted];

      // mlt.h
      subgraph cluster_mlt {
        style=bold;
        MLTSampler
          PrimarySample;
        MLTIntegrator;
      };
      Sampler -> MLTSampler[style=dashed];
      RNG -> MLTSampler;
      PrimarySample -> MLTSampler;

      Integrator -> MLTIntegrator[style=dashed];
      Camera -> MLTIntegrator[color=purple];
      Scene -> MLTIntegrator[style=dotted];
      Spectrum -> MLTIntegrator[style=dotted];
      MemoryArena -> MLTIntegrator[style=dotted];
      Distribution1D -> MLTIntegrator[style=dotted,color=purple];
      Light -> MLTIntegrator[style=dotted,color=purple];
      MLTSampler -> MLTIntegrator[style=dotted];
      Point2 -> MLTIntegrator[style=dotted,color=purple];

      // path.h
      subgraph cluster_path {
        style=bold;
        PathIntegrator;
      };
      SamplerIntegrator -> PathIntegrator[style=dashed];
      LightDistribution -> PathIntegrator[color=purple];
      Scene -> PathIntegrator[style=dotted];
      Sampler -> PathIntegrator[style=dotted];
      Spectrum -> PathIntegrator[style=dotted];
      RayDifferential -> PathIntegrator[style=dotted];
      MemoryArena -> PathIntegrator[style=dotted];

      // sppm.h
      subgraph cluster_sppm {
        style=bold;
        SPPMIntegrator;
      };
      Integrator -> SPPMIntegrator[style=dashed];
      Camera -> SPPMIntegrator[color=purple];
      Scene -> PathIntegrator[style=dotted];

      // volpath.h
      subgraph cluster_volpath {
        style=bold;
        VolPathIntegrator;
      };
      SamplerIntegrator -> VolPathIntegrator[style=dashed];
      LightDistribution -> VolPathIntegrator[color=purple];
      Scene -> PathIntegrator[style=dotted];
      Sampler -> PathIntegrator[style=dotted];
      Spectrum -> PathIntegrator[style=dotted];
      RayDifferential -> PathIntegrator[style=dotted];
      MemoryArena -> PathIntegrator[style=dotted];

      // whitted.h
      subgraph cluster_whitted {
        style=bold;
        WhittedIntegrator;
      };
      SamplerIntegrator -> WhittedIntegrator[style=dashed];
      Scene -> WhittedIntegrator[style=dotted];
      Sampler -> WhittedIntegrator[style=dotted];
      Spectrum -> WhittedIntegrator[style=dotted];
      RayDifferential -> WhittedIntegrator[style=dotted];
      MemoryArena -> WhittedIntegrator[style=dotted];
    };
  };

  // lights/
  subgraph cluster_lights0 {
    style=bold;
    subgraph cluster_lights1 {
      style=bold;

      // diffuse.h
      subgraph cluster_diffuse {
        style=bold;
        DiffuseAreaLight;
      };
      AreaLight -> DiffuseAreaLight[style=dashed];
      Spectrum -> DiffuseAreaLight;
      Shape -> DiffuseAreaLight[color=purple];
      Interaction -> DiffuseAreaLight[style=dotted];
      Vector3 -> DiffuseAreaLight[style=dotted];
      Point2 -> DiffuseAreaLight[style=dotted];
      VisibilityTester -> DiffuseAreaLight[style=dotted,color=purple];
      Normal3 -> DiffuseAreaLight[style=dotted];
      Ray -> DiffuseAreaLight[style=dotted];

      // distant.h
      subgraph cluster_distant {
        style=bold;
        DistantLight;
      };
      Light -> DistantLight[style=dashed];
      Spectrum -> DistantLight;
      Vector3 -> DistantLight;
      Point3 -> DistantLight;
      Scene -> DistantLight[style=dotted];
      Interaction -> DiffuseAreaLight[style=dotted];
      Point2 -> DiffuseAreaLight[style=dotted];
      VisibilityTester -> DiffuseAreaLight[style=dotted,color=purple];
      Normal3 -> DiffuseAreaLight[style=dotted];
      Ray -> DiffuseAreaLight[style=dotted];

      // goniometric.h
      subgraph cluster_goniometric {
        style=bold;
        GonioPhotometricLight;
      };
      Light -> GonioPhotometricLight[style=dashed];
      Spectrum -> GonioPhotometricLight;
      Point3 -> GonioPhotometricLight;
      MIPMap -> GonioPhotometricLight[color=purple];
      RGBSpectrum -> GonioPhotometricLight[color=purple];
      Vector3 -> GonioPhotometricLight[style=dotted];
      Interaction -> GonioPhotometricLight[style=dotted];
      Point2 -> GonioPhotometricLight[style=dotted];
      Ray -> GonioPhotometricLight[style=dotted];
      Normal3 -> GonioPhotometricLight[style=dotted];

      // infinite.h
      subgraph cluster_infinite {
        style=bold;
        InfiniteAreaLight;
      };
      Light -> InfiniteAreaLight[style=dashed];
      Spectrum -> InfiniteAreaLight;
      Point3 -> InfiniteAreaLight;
      MIPMap -> InfiniteAreaLight[color=purple];
      RGBSpectrum -> InfiniteAreaLight[color=purple];
      Distribution2D -> InfiniteAreaLight[color=purple];
      RayDifferential -> InfiniteAreaLight[style=dotted];
      Vector3 -> InfiniteAreaLight[style=dotted];
      Interaction -> InfiniteAreaLight[style=dotted];
      Point2 -> InfiniteAreaLight[style=dotted];
      VisibilityTester -> InfiniteAreaLight[style=dotted,color=purple];
      Ray -> InfiniteAreaLight[style=dotted];
      Normal3 -> InfiniteAreaLight[style=dotted];

      // point.h
      subgraph cluster_point {
        style=bold;
        PointLight;
      };
      Light -> PointLight[style=dashed];
      Spectrum -> PointLight;
      Point3 -> PointLight;
      Vector3 -> PointLight[style=dotted];
      Interaction -> PointLight[style=dotted];
      Point2 -> PointLight[style=dotted];
      VisibilityTester -> PointLight[style=dotted,color=purple];
      Ray -> PointLight[style=dotted];
      Normal3 -> PointLight[style=dotted];

      // projection.h
      subgraph cluster_projection {
        style=bold;
        ProjectionLight;
      };
      Light -> ProjectionLight[style=dashed];
      MIPMap -> ProjectionLight[color=purple];
      RGBSpectrum -> ProjectionLight[color=purple];
      Spectrum -> ProjectionLight;
      Point3 -> ProjectionLight;
      Transform -> ProjectionLight;
      Bounds2 -> ProjectionLight;
      Interaction -> ProjectionLight[style=dotted];
      Point2 -> ProjectionLight[style=dotted];
      Vector3 -> ProjectionLight[style=dotted];
      VisibilityTester -> ProjectionLight[style=dotted,color=purple];
      Ray -> ProjectionLight[style=dotted];
      Normal3 -> ProjectionLight[style=dotted];

      // spot.h
      subgraph cluster_spot {
        style=bold;
        SpotLight;
      };
      Light -> SpotLight[style=dashed];
      Spectrum -> SpotLight;
      Point3 ->SpotLight
        Vector3 -> SpotLight[style=dotted];
      Interaction -> SpotLight[style=dotted];
      Point2 -> SpotLight[style=dotted];
      VisibilityTester -> SpotLight[style=dotted,color=purple];
      Ray -> SpotLight[style=dotted];
      Normal3 -> SpotLight[style=dotted];
    };
  };

  // materials/
  subgraph cluster_materials0 {
    style=bold;
    subgraph cluster_materials1 {
      style=bold;

      // disney.h
      subgraph cluster_disney {
        style=bold;
        DisneyMaterial;
      };
      Material -> DisneyMaterial[style=dashed];
      Texture -> DisneyMaterial[color=purple];
      Spectrum -> DisneyMaterial[color=purple];
      SurfaceInteraction -> DisneyMaterial[style=dotted,color=purple];
      MemoryArena -> DisneyMaterial[style=dotted];
      TransportMode -> DisneyMaterial[style=dotted];

      // fourier.h
      subgraph cluster_fourier {
        style=bold;
        FourierMaterial;
      };
      Material -> FourierMaterial[style=dashed];
      Texture -> FourierMaterial[color=purple];
      FourierBSDFTable -> FourierMaterial[color=purple];
      SurfaceInteraction -> FourierMaterial[style=dotted,color=purple];
      MemoryArena -> FourierMaterial[style=dotted];
      TransportMode -> FourierMaterial[style=dotted];

      // glass.h
      subgraph cluster_glass {
        style=bold;
        GlassMaterial;
      };
      Material -> GlassMaterial[style=dashed];
      Texture -> GlassMaterial[color=purple];
      Spectrum -> GlassMaterial[color=purple];
      SurfaceInteraction -> GlassMaterial[style=dotted,color=purple];
      MemoryArena -> GlassMaterial[style=dotted];
      TransportMode -> GlassMaterial[style=dotted];

      // hair.h
      subgraph cluster_hair {
        style=bold;
        HairMaterial;
        HairBSDF;
      };
      Material -> HairMaterial[style=dashed];
      Texture -> HairMaterial[color=purple];
      Spectrum -> HairMaterial[color=purple];
      SurfaceInteraction -> HairMaterial[style=dotted,color=purple];
      MemoryArena -> HairMaterial[style=dotted];
      TransportMode -> HairMaterial[style=dotted];

      BxDF -> HairBSDF[style=dashed];
      Spectrum -> HairBSDF;
      Vector3 -> HairBSDF[style=dotted];
      Point2 -> HairBSDF[style=dotted];
      BxDFType -> HairBSDF[style=dotted,color=purple];

      // kdsubsurface.h
      subgraph cluster_kdsubsurface {
        style=bold;
        KdSubSurfaceMaterial;
      };
      Material -> KdSubSurfaceMaterial[style=dashed];
      Texture -> KdSubSurfaceMaterial[color=purple];
      Spectrum -> KdSubSurfaceMaterial[color=purple];
      BSSRDFTable -> KdSubSurfaceMaterial;
      SurfaceInteraction -> KdSubSurfaceMaterial[style=dotted,color=purple];
      MemoryArena -> KdSubSurfaceMaterial[style=dotted];
      TransportMode -> KdSubSurfaceMaterial[style=dotted];

      // matte.h
      subgraph cluster_matte {
        style=bold;
        MatteMaterial;
      };
      Material -> MatteMaterial[style=dashed];
      Texture -> MatteMaterial[color=purple];
      Spectrum -> MatteMaterial[color=purple];
      SurfaceInteraction -> MatteMaterial[style=dotted,color=purple];
      MemoryArena -> MatteMaterial[style=dotted];
      TransportMode -> MatteMaterial[style=dotted];

      // metal.h
      subgraph cluster_metal {
        style=bold;
        MetalMaterial;
      };
      Material -> MetalMaterial[style=dashed];
      Texture -> MetalMaterial[color=purple];
      Spectrum -> MetalMaterial[color=purple];
      SurfaceInteraction -> MetalMaterial[style=dotted,color=purple];
      MemoryArena -> MetalMaterial[style=dotted];
      TransportMode -> MetalMaterial[style=dotted];

      // mirror.h
      subgraph cluster_mirror {
        style=bold;
        MirrorMaterial;
      };
      Material -> MirrorMaterial[style=dashed];
      Texture -> MirrorMaterial[color=purple];
      Spectrum -> MirrorMaterial[color=purple];
      SurfaceInteraction -> MirrorMaterial[style=dotted,color=purple];
      MemoryArena -> MirrorMaterial[style=dotted];
      TransportMode -> MirrorMaterial[style=dotted];

      // mixmat.h
      subgraph cluster_mixmat {
        style=bold;
        MixMaterial;
      };
      Material -> MixMaterial[style=dashed];
      Texture -> MixMaterial[color=purple];
      Spectrum -> MixMaterial[color=purple];
      Material -> MixMaterial[color=purple];
      SurfaceInteraction -> MixMaterial[style=dotted,color=purple];
      MemoryArena -> MixMaterial[style=dotted];
      TransportMode -> MixMaterial[style=dotted];

      // plastic.h
      subgraph cluster_plastic {
        style=bold;
        PlasticMaterial;
      };
      Material -> PlasticMaterial[style=dashed];
      Texture -> PlasticMaterial[color=purple];
      Spectrum -> PlasticMaterial[color=purple];
      SurfaceInteraction -> PlasticMaterial[style=dotted,color=purple];
      MemoryArena -> PlasticMaterial[style=dotted];
      TransportMode -> PlasticMaterial[style=dotted];

      // substrate.h
      subgraph cluster_substrate {
        style=bold;
        SubstrateMaterial;
      };
      Material -> SubstrateMaterial[style=dashed];
      Texture -> SubstrateMaterial[color=purple];
      Spectrum -> SubstrateMaterial[color=purple];
      SurfaceInteraction -> SubstrateMaterial[style=dotted,color=purple];
      MemoryArena -> SubstrateMaterial[style=dotted];
      TransportMode -> SubstrateMaterial[style=dotted];

      // subsurface.h
      subgraph cluster_subsurface {
        style=bold;
        SubsurfaceMaterial;
      };
      Material -> SubsurfaceMaterial[style=dashed];
      Texture -> SubsurfaceMaterial[color=purple];
      Spectrum -> SubsurfaceMaterial[color=purple];
      BSSRDFTable -> SubsurfaceMaterial;
      SurfaceInteraction -> SubsurfaceMaterial[style=dotted,color=purple];
      MemoryArena -> SubsurfaceMaterial[style=dotted];
      TransportMode -> SubsurfaceMaterial[style=dotted];

      // translucent.h
      subgraph cluster_translucent {
        style=bold;
        TranslucentMaterial;
      };
      Material -> TranslucentMaterial[style=dashed];
      Texture -> TranslucentMaterial[color=purple];
      Spectrum -> TranslucentMaterial[color=purple];
      SurfaceInteraction -> TranslucentMaterial[style=dotted,color=purple];
      MemoryArena -> TranslucentMaterial[style=dotted];
      TransportMode -> TranslucentMaterial[style=dotted];

      // uber.h
      subgraph cluster_uber {
        style=bold;
        UberMaterial;
      };
      Material -> UberMaterial[style=dashed];
      Texture -> UberMaterial[color=purple];
      Spectrum -> UberMaterial[color=purple];
      SurfaceInteraction -> UberMaterial[style=dotted,color=purple];
      MemoryArena -> UberMaterial[style=dotted];
      TransportMode -> UberMaterial[style=dotted];
    };
  };

  // media/
  subgraph cluster_media0 {
    style=bold;
    subgraph cluster_media1 {
      style=bold;

      // grid.h
      subgraph cluster_grid {
        style=bold;
        GridDensityMedium;
      };
      Medium -> GridDensityMedium[style=dashed];
      Spectrum -> GridDensityMedium;
      Transform -> GridDensityMedium;
      Point3 -> GridDensityMedium[style=dotted];
      Ray -> GridDensityMedium[style=dotted];
      Sampler -> GridDensityMedium[style=dotted];
      MemoryArena -> GridDensityMedium[style=dotted];
      MediumInteraction -> GridDensityMedium[style=dotted,color=purple];

      // homogeneous.h
      subgraph cluster_homogeneous {
        style=bold;
        HomogeneousMedium;
      };
      Medium -> HomogeneousMedium[style=dashed];
      Spectrum -> HomogeneousMedium;
      Point3 -> GridDensityMedium[style=dotted];
      Ray -> GridDensityMedium[style=dotted];
      Sampler -> GridDensityMedium[style=dotted];
      MemoryArena -> GridDensityMedium[style=dotted];
      MediumInteraction -> GridDensityMedium[style=dotted,color=purple];
    };
  };

  // samplers/
  subgraph cluster_samplers0 {
    style=bold;
    subgraph cluster_samplers1 {
      style=bold;

      // halton.h
      subgraph cluster_halton {
        style=bold;
        HaltonSampler;
      };
      GlobalSampler -> HaltonSampler[style=dashed];
      Point2 -> HaltonSampler;

      // maxmin.h
      subgraph cluster_maxmin {
        style=bold;
        MaxMinDistSampler;
      };
      PixelSampler -> MaxMinDistSampler[style=dashed];
      Point2 -> RandomSampler[style=dotted];

      // random.h
      subgraph cluster_random {
        style=bold;
        RandomSampler;
      };
      Sampler -> RandomSampler[style=dashed];
      RNG -> RandomSampler;
      Point2 -> RandomSampler[style=dotted];

      // sobol.h
      subgraph cluster_sobol {
        style=bold;
        SobolSampler;
      };
      GlobalSampler -> SobolSampler[style=dashed];
      Bounds2 -> SobolSampler;

      // stratified.h
      subgraph cluster_statified {
        style=bold;
        StratifiedSampler;
      };
      PixelSampler -> StratifiedSampler[style=dashed];
      Point2 -> StratifiedSampler[style=dotted];

      // zerotwosequence.h
      subgraph cluster_zerotwosequence {
        style=bold;
        ZeroTwoSequenceSampler;
      };
      PixelSampler -> ZeroTwoSequenceSampler[style=dashed];
      Point2 -> ZeroTwoSequenceSampler[style=dotted];
    };
  };

  // shapes/
  subgraph cluster_shapes0 {
    style=bold;
    subgraph cluster_shapes1 {
      style=bold;

      // cone.h
      subgraph cluster_cone {
        style=bold;
        Cone;
      };
      Shape -> Cone[style=dashed];
      Bounds3 -> Cone[style=dotted];
      Ray -> Cone[style=dotted];
      SurfaceInteraction -> Cone[style=dotted,color=purple];
      Interaction -> Cone[style=dotted];
      Point2 -> Cone[style=dotted];

      // curve.h
      subgraph cluster_curve {
        style=bold;
        CurveType
          CurveCommon;
        Curve
      };
      CurveType -> CurveCommon;
      Point3 -> CurveCommon;
      Normal3 -> CurveCommon;

      Shape -> Curve[style=dashed];
      CurveCommon -> Curve[color=purple];
      Bounds3 -> Curve[style=dotted];
      Ray -> Curve[style=dotted];
      SurfaceInteraction -> Curve[style=dotted,color=purple];
      Interaction -> Curve[style=dotted];
      Point2 -> Curve[style=dotted];

      // cylinder.h
      subgraph cluster_cylinder {
        style=bold;
        Cylinder;
      };
      Shape -> Cylinder[style=dashed];
      Bounds3 -> Cylinder[style=dotted];
      Ray -> Cylinder[style=dotted];
      SurfaceInteraction -> Cylinder[style=dotted,color=purple];
      Interaction -> Cylinder[style=dotted];
      Point2 -> Cylinder[style=dotted];

      // disk.h
      subgraph cluster_disk {
        style=bold;
        Disk;
      };
      Shape -> Disk[style=dashed];
      Bounds3 -> Disk[style=dotted];
      Ray -> Disk[style=dotted];
      SurfaceInteraction -> Disk[style=dotted,color=purple];
      Interaction -> Disk[style=dotted];
      Point2 -> Disk[style=dotted];

      // hyperboloid.h
      subgraph cluster_hyperboloid {
        style=bold;
        Hyperboloid;
      };
      Shape -> Hyperboloid[style=dashed];
      Point3 -> Hyperboloid;
      Bounds3 -> Hyperboloid[style=dotted];
      Ray -> Hyperboloid[style=dotted];
      SurfaceInteraction -> Hyperboloid[style=dotted,color=purple];
      Interaction -> Hyperboloid[style=dotted];
      Point2 -> Hyperboloid[style=dotted];

      // paraboloid.h
      subgraph cluster_paraboloid {
        style=bold;
        Paraboloid;
      };
      Shape -> Paraboloid[style=dashed];
      Bounds3 -> Paraboloid[style=dotted];
      Ray -> Paraboloid[style=dotted];
      SurfaceInteraction -> Paraboloid[style=dotted,color=purple];
      Interaction -> Paraboloid[style=dotted];
      Point2 -> Paraboloid[style=dotted];

      // sphere.h
      subgraph cluster_sphere {
        style=bold;
        Sphere;
      };
      Shape -> Sphere[style=dashed];
      Bounds3 -> Sphere[style=dotted];
      Ray -> Sphere[style=dotted];
      SurfaceInteraction -> Sphere[style=dotted,color=purple];
      Interaction -> Sphere[style=dotted];
      Point2 -> Sphere[style=dotted];

      // triangle.h
      subgraph cluster_triangle {
        style=bold;
        TriangleMesh;
        Triangle;
      };
      Point3 -> TriangleMesh[color=purple];
      Normal3 -> TriangleMesh[color=purple];
      Vector3 -> TriangleMesh[color=purple];
      Point2 -> TriangleMesh[color=purple];
      Texture -> TriangleMesh[color=purple];

      Shape -> Triangle[style=dashed];
      TriangleMesh -> Triangle[color=purple];
      Bounds3 -> Sphere[style=dotted];
      Ray -> Sphere[style=dotted];
      SurfaceInteraction -> Sphere[style=dotted,color=purple];
      Interaction -> Sphere[style=dotted];
      Point2 -> Sphere[style=dotted];
    };
  };

  // textures/
  subgraph cluster_textures0 {
    style=bold;
    subgraph cluster_textures1 {
      style=bold;

      // bilerp.h
      subgraph cluster_bilerp {
        style=bold;
        BilerpTexture;
      };
      Texture -> BilerpTexture[style=dashed];
      TextureMapping2D -> BilerpTexture[color=purple];
      SurfaceInteraction -> BilerpTexture[style=dotted];

      // checkerboard.h
      subgraph cluster_checkerboard {
        style=bold;
        AAMethod;
        Checkerboard2DTexture;
        Checkerboard3DTexture;
      };
      Texture -> Checkerboard2DTexture[style=dashed];
      TextureMapping2D -> Checkerboard2DTexture[color=purple];
      Texture -> Checkerboard2DTexture[color=purple];
      AAMethod -> Checkerboard2DTexture;
      SurfaceInteraction -> Checkerboard2DTexture[style=dotted];

      Texture -> Checkerboard3DTexture[style=dashed];
      TextureMapping2D -> Checkerboard3DTexture[color=purple];
      Texture -> Checkerboard3DTexture[color=purple];
      SurfaceInteraction -> Checkerboard3DTexture[style=dotted];

      // constant.h
      subgraph cluster_constant {
        style=bold;
        ConstantTexture;
      };
      Texture -> ConstantTexture[style=dashed];
      SurfaceInteraction -> ConstantTexture[style=dotted];

      // dots.h
      subgraph cluster_dots {
        style=bold;
        DotsTexture;
      };
      Texture -> DotsTexture[style=dashed];
      TextureMapping2D -> DotsTexture[color=purple];
      Texture -> DotsTexture[color=purple];
      SurfaceInteraction -> DotsTexture[style=dotted];

      // fbm.h
      subgraph cluster_fbm {
        style=bold;
        FBmTexture;
      };
      Texture -> FBmTexture[style=dashed];
      TextureMapping3D -> FBmTexture[color=purple];
      SurfaceInteraction -> FBmTexture[style=dotted];

      // imagemap.h
      subgraph cluster_imagemap {
        style=bold;
        TexInfo;
        ImageTexture;
      };
      ImageWrap -> TexInfo;

      Texture -> ImageTexture[style=dashed];
      TextureMapping2D -> ImageTexture[color=purple];
      MIPMap -> ImageTexture[color=purple];
      TexInfo -> ImageTexture;
      SurfaceInteraction -> ImageTexture[style=dotted];
      ImageWrap -> ImageTexture[style=dotted];
      RGBSpectrum -> ImageTexture[style=dotted];
      Spectrum -> ImageTexture[style=dotted];

      // marble.h
      subgraph cluster_marble {
        style=bold;
        MarbleTexture;
      };
      Texture -> MarbleTexture[style=dashed];
      TextureMapping3D -> MarbleTexture[color=purple];
      Spectrum -> MarbleTexture[style=dotted];
      SurfaceInteraction -> MarbleTexture[style=dotted];

      // mix.h
      subgraph cluster_mix {
        style=bold;
        MixTexture;
      };
      Texture -> MixTexture[style=dashed];
      Texture -> MixTexture[color=purple];
      SurfaceInteraction -> MixTexture[style=dotted];

      // ptex.h
      subgraph cluster_ptex {
        style=bold;
        PtexTexture;
      };
      Texture -> PtexTexture[style=dashed];
      SurfaceInteraction -> PtexTexture[style=dotted];

      // scale.h
      subgraph cluster_scale {
        style=bold;
        ScaleTexture;
      };
      Texture -> ScaleTexture[style=dashed];
      Texture -> ScaleTexture[color=purple];
      SurfaceInteraction -> ScaleTexture[style=dotted];

      // uv.h
      subgraph cluster_uv {
        style=bold;
        UVTexture;
      };
      Texture -> UVTexture[style=dashed];
      TextureMapping2D -> UVTexture[color=purple];
      SurfaceInteraction -> UVTexture[style=dotted];
      Spectrum -> UVTexture[style=dotted];

      // windy.h
      subgraph cluster_windy {
        style=bold;
        WindyTexture;
      };
      Texture -> WindyTexture[style=dashed];
      TextureMapping3D -> WindyTexture[color=purple];
      SurfaceInteraction -> WindyTexture[style=dotted];

      // wrinkled.h
      subgraph cluster_wrinkled {
        style=bold;
        WrinkledTexture;
      };
      Texture -> WrinkledTexture[style=dashed];
      TextureMapping3D -> WrinkledTexture[color=purple];
      SurfaceInteraction -> WrinkledTexture[style=dotted];
    };
  };
}
